{"version":3,"file":"peaks-similarity.min.js","sources":["../src/calculateOverlapFromDiff.js","../src/checkArray.js","../src/extract.js","../src/getCommonArray.js","../node_modules/ml-stat/array.js","../node_modules/ml-stat/matrix.js","../node_modules/ml-stat/index.js","../src/normalize.js","../src/commonExtractAndNormalize.js","../src/extractAndNormalize.js","../src/getIntersection.js","../src/index.js"],"sourcesContent":["export function calculateOverlapFromDiff(diffs) {\n  if (diffs[1].length === 0) return 0;\n  let sumPos = 0;\n  for (let i = 0; i < diffs[1].length; i++) {\n    sumPos += Math.abs(diffs[1][i]);\n  }\n  return 1 - sumPos;\n}\n","/**\n        This code requires the use of an array like  [[x1,y1],[x2,y2], ...]\n        If it is not the right format, we will just convert it\n        Otherwise we return the correct format\n     */\nexport function checkArray(points) {\n  // if it is already a 2D array of points, we just return them\n  if (\n    Array.isArray(points) &&\n    Array.isArray(points[0]) &&\n    points.length === 2\n  ) {\n    return points;\n  }\n  const x = new Array(points.length);\n  const y = new Array(points.length);\n  for (let i = 0; i < points.length; i++) {\n    x[i] = points[i][0];\n    y[i] = points[i][1];\n  }\n  return [x, y];\n}\n","export function extract(array, from, to) {\n  const newArray = [[], []];\n  let j = 0;\n  const length = array[0] ? array[0].length : 0;\n  for (let i = 0; i < length; i++) {\n    if ((!from || array[0][i] >= from) && (!to || array[0][i] <= to)) {\n      newArray[0][j] = array[0][i];\n      newArray[1][j] = array[1][i];\n      j++;\n    }\n  }\n  return newArray;\n}\n","// returns an new array based on array1 where there is a peak of array2 at a distance under width/2\n\nexport function getCommonArray(array1, array2, width) {\n  const newArray = [[], []];\n  let pos2 = 0;\n  width /= 2;\n  let j = 0;\n  const array1Length = array1[0] ? array1[0].length : 0;\n  const array2Length = array2[0] ? array2[0].length : 0;\n\n  for (let i = 0; i < array1Length; i++) {\n    while (pos2 < array2Length && array1[0][i] > array2[0][pos2] + width) {\n      pos2++;\n    }\n    if (pos2 < array2Length && array1[0][i] > array2[0][pos2] - width) {\n      newArray[0][j] = array1[0][i];\n      newArray[1][j] = array1[1][i];\n      j++;\n    }\n  }\n  return newArray;\n}\n","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = values[0];\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\n/**\n * IEEE Transactions on biomedical engineering, vol. 52, no. 1, january 2005, p. 76-\n * Calculate the standard deviation via the Median of the absolute deviation\n *  The formula for the standard deviation only holds for Gaussian random variables.\n * @returns {{mean: number, stdev: number}}\n */\nexports.robustMeanAndStdev = function robustMeanAndStdev(y) {\n    var mean = 0, stdev = 0;\n    var length = y.length, i = 0;\n    for (i = 0; i < length; i++) {\n        mean += y[i];\n    }\n    mean /= length;\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort(compareNumbers);\n    if (length % 2 === 1) {\n        stdev = averageDeviations[(length - 1) / 2] / 0.6745;\n    } else {\n        stdev = 0.5 * (averageDeviations[length / 2] + averageDeviations[length / 2 - 1]) / 0.6745;\n    }\n\n    return {\n        mean: mean,\n        stdev: stdev\n    };\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof (alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw 'Vectors do not have the same dimensions';\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    } else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    } else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof (eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = [].concat(values);\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof (standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n","'use strict';\n\nvar arrayStat = require('./array');\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\nexports.max = function max(matrix) {\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return max;\n};\n\nexports.min = function min(matrix) {\n    var min = Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n        }\n    }\n    return min;\n};\n\nexports.minMax = function minMax(matrix) {\n    var min = Infinity;\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return {\n        min:min,\n        max:max\n    };\n};\n\nexports.entropy = function entropy(matrix, eps) {\n    if (typeof (eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n};\n\nexports.mean = function mean(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n};\n\nexports.sum = function sum(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theSum, i, j;\n\n    if (dimension === -1) {\n        theSum = [0];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theSum[0] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theSum = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theSum[j] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theSum = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theSum[j] += matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theSum;\n};\n\nexports.product = function product(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theProduct, i, j;\n\n    if (dimension === -1) {\n        theProduct = [1];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theProduct[0] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theProduct = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < rows; i++) {\n                theProduct[j] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theProduct = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < cols; i++) {\n                theProduct[j] *= matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theProduct;\n};\n\nexports.standardDeviation = function standardDeviation(matrix, means, unbiased) {\n    var vari = exports.variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n};\n\nexports.variance = function variance(matrix, means, unbiased) {\n    if (typeof (unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n};\n\nexports.median = function median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort(compareNumbers);\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n};\n\nexports.mode = function mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n};\n\nexports.skewness = function skewness(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n};\n\nexports.kurtosis = function kurtosis(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n};\n\nexports.standardError = function standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = exports.standardDeviation(matrix);\n    var l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n};\n\nexports.covariance = function covariance(matrix, dimension) {\n    return exports.scatter(matrix, undefined, dimension);\n};\n\nexports.scatter = function scatter(matrix, divisor, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof (divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = exports.mean(matrix, dimension);\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n\nexports.correlation = function correlation(matrix) {\n    var means = exports.mean(matrix),\n        standardDeviations = exports.standardDeviation(matrix, true, means),\n        scores = exports.zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n};\n\nexports.zScores = function zScores(matrix, means, standardDeviations) {\n    means = means || exports.mean(matrix);\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix, true, means);\n    return exports.standardize(exports.center(matrix, means, false), standardDeviations, true);\n};\n\nexports.center = function center(matrix, means, inPlace) {\n    means = means || exports.mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n};\n\nexports.standardize = function standardize(matrix, standardDeviations, inPlace) {\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n};\n\nexports.weightedVariance = function weightedVariance(matrix, weights) {\n    var means = exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n};\n\nexports.weightedMean = function weightedMean(matrix, weights, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n};\n\nexports.weightedCovariance = function weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return exports.weightedScatter(matrix, weights, means, factor, dimension);\n};\n\nexports.weightedScatter = function weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    if (typeof (factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n","import { array as StatArray } from 'ml-stat';\n\nexport function normalize(array) {\n  const min = StatArray.min(array[1]);\n  const max = StatArray.max(array[1]);\n  const sum = StatArray.sum(array[1]);\n  const length = array[1] ? array[1].length : 0;\n  if (sum !== 0) {\n    for (let i = 0; i < length; i++) {\n      array[1][i] /= sum;\n    }\n  }\n  return {\n    sum,\n    min,\n    max,\n  };\n}\n","import { extract } from './extract';\nimport { COMMON_SECOND, COMMON_FIRST } from './index';\nimport { getCommonArray } from './getCommonArray';\nimport { normalize } from './normalize';\n\n// this method will systematically take care of both array\nexport function commonExtractAndNormalize(\n  array1,\n  array2,\n  width,\n  from,\n  to,\n  common,\n) {\n  if (!Array.isArray(array1) || !Array.isArray(array2)) {\n    return {\n      info: undefined,\n      data: undefined,\n    };\n  }\n  const extract1 = extract(array1, from, to);\n  const extract2 = extract(array2, from, to);\n  let common1, common2, info1, info2;\n  if (common & COMMON_SECOND) {\n    common1 = getCommonArray(extract1, extract2, width);\n    info1 = normalize(common1);\n  } else {\n    common1 = extract1;\n    info1 = normalize(common1);\n  }\n  if (common & COMMON_FIRST) {\n    common2 = getCommonArray(extract2, extract1, width);\n    info2 = normalize(common2);\n  } else {\n    common2 = extract2;\n    info2 = normalize(common2);\n  }\n\n  return {\n    info1,\n    info2,\n    data1: common1,\n    data2: common2,\n  };\n}\n","import { extract } from './extract';\nimport { normalize } from './normalize';\n\nexport function extractAndNormalize(array, from, to) {\n  if (!Array.isArray(array)) {\n    return {\n      info: undefined,\n      data: undefined,\n    };\n  }\n  const newArray = extract(array, from, to);\n  const info = normalize(newArray);\n  return {\n    info,\n    data: newArray,\n  };\n}\n","// Adapted from: http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect/1968345#1968345\nexport function getIntersection(segment1, segment2) {\n  const p0X = segment1[0][0];\n  const p0Y = segment1[0][1];\n  const p1X = segment1[1][0];\n  const p1Y = segment1[1][1];\n  const p2X = segment2[0][0];\n  const p2Y = segment2[0][1];\n  const p3X = segment2[1][0];\n  const p3Y = segment2[1][1];\n\n  const s1X = p1X - p0X;\n  const s1Y = p1Y - p0Y;\n  const s2X = p3X - p2X;\n  const s2Y = p3Y - p2Y;\n  const s = (-s1Y * (p0X - p2X) + s1X * (p0Y - p2Y)) / (-s2X * s1Y + s1X * s2Y);\n  const t = (s2X * (p0Y - p2Y) - s2Y * (p0X - p2X)) / (-s2X * s1Y + s1X * s2Y);\n  if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n    return {\n      x: p0X + t * s1X,\n      y: p0Y + t * s1Y,\n    };\n  }\n  return null; // No collision\n}\n","// should be a binary operation !\n\nimport { calculateOverlapFromDiff } from './calculateOverlapFromDiff';\nimport { checkArray } from './checkArray';\nimport { commonExtractAndNormalize } from './commonExtractAndNormalize';\nimport { extract } from './extract';\nimport { extractAndNormalize } from './extractAndNormalize';\nimport { getCommonArray } from './getCommonArray.js';\nimport { getIntersection } from './getIntersection';\nimport { normalize } from './normalize';\n\nconst COMMON_NO = 0;\nexport const COMMON_FIRST = 1;\nexport const COMMON_SECOND = 2;\nconst COMMON_BOTH = 3;\n\n/**\n * Create a comparator class\n * {object} [options={}]\n * {string} [options.common=''] should we take only common peaks 'first', 'second', 'both', ''\n * {number} [options.widthBottom=2] bottom trapezoid width for similarity evaluation\n * {number} [options.widthTop=1] top trapezoid width for similarity evaluation\n * {number} [options.from] from region used for similarity calculation\n * {number} [options.to] to region used for similarity calculation\n */\n\nexport default class Comparator {\n  constructor(options = {}) {\n    this.widthTop;\n    this.widthBottom;\n    this.from;\n    this.to;\n    this.array1Extract;\n    this.array2Extract;\n    this.widthSlope;\n    this.array1ExtractInfo;\n    this.array2ExtractInfo;\n    this.common;\n    this.commonFactor;\n\n    this.array1 = [];\n    this.array2 = [];\n\n    this.setOptions(options);\n  }\n\n  /*\n     2 formats are allowed:\n     [[x1,x2,...],[y1,y2,...]] or [[x1,y1],[x2,y2], ...]\n    */\n\n  setOptions(options = {}) {\n    if (typeof options.common === 'string') {\n      if (options.common.toLowerCase() === 'first') {\n        this.common = COMMON_FIRST;\n      } else if (options.common.toLowerCase() === 'second') {\n        this.common = COMMON_SECOND;\n      } else if (options.common.toLowerCase() === 'both') {\n        this.common = COMMON_BOTH;\n      } else {\n        this.common = COMMON_NO;\n      }\n    } else if (options.common === true) {\n      this.common = COMMON_BOTH;\n    } else {\n      this.common = COMMON_NO;\n    }\n    this.trapezoid = options.trapezoid;\n    this.commonFactor = options.commonFactor || this.commonFactor || 4;\n\n    const {\n      widthBottom = this.widthBottom || 2,\n      widthTop = this.widthTop || 1,\n      from = this.from,\n      to = this.to,\n    } = options;\n    this.setTrapezoid(widthBottom, widthTop);\n    this.setFromTo(from, to);\n  }\n\n  setPeaks1(anArray) {\n    this.array1 = checkArray(anArray);\n\n    if (this.common) {\n      const extracts = commonExtractAndNormalize(\n        this.array1,\n        this.array2,\n        this.widthBottom,\n        this.from,\n        this.to,\n        this.common,\n      );\n      this.array1Extract = extracts.data1;\n      this.array1ExtractInfo = extracts.info1;\n      this.array2Extract = extracts.data2;\n      this.array2ExtractInfo = extracts.info2;\n    } else {\n      const extract = extractAndNormalize(this.array1, this.from, this.to);\n      this.array1Extract = extract.data;\n      this.array1ExtractInfo = extract.info;\n    }\n  }\n\n  setPeaks2(anArray) {\n    this.array2 = checkArray(anArray);\n    if (this.common) {\n      const extracts = commonExtractAndNormalize(\n        this.array1,\n        this.array2,\n        this.widthBottom,\n        this.from,\n        this.to,\n        this.common,\n      );\n      this.array1Extract = extracts.data1;\n      this.array1ExtractInfo = extracts.info1;\n      this.array2Extract = extracts.data2;\n      this.array2ExtractInfo = extracts.info2;\n    } else {\n      const extract = extractAndNormalize(this.array2, this.from, this.to);\n      this.array2Extract = extract.data;\n      this.array2ExtractInfo = extract.info;\n    }\n  }\n\n  getExtract1() {\n    return this.array1Extract;\n  }\n\n  getExtract2() {\n    return this.array2Extract;\n  }\n\n  getExtractInfo1() {\n    return this.array1ExtractInfo;\n  }\n\n  getExtractInfo2() {\n    return this.array2ExtractInfo;\n  }\n\n  setTrapezoid(newWidthBottom, newWidthTop) {\n    this.widthTop = newWidthTop;\n    this.widthBottom = newWidthBottom;\n    this.widthSlope = (this.widthBottom - this.widthTop) / 2;\n    if (this.widthBottom < this.widthTop) {\n      throw new Error('widthBottom has to be larger than widthTop');\n    }\n  }\n\n  setFromTo(newFrom, newTo) {\n    if (newFrom === this.from && newTo === this.to) return;\n    this.from = newFrom;\n    this.to = newTo;\n    if (this.common) {\n      const extracts = commonExtractAndNormalize(\n        this.array1,\n        this.array2,\n        this.widthBottom,\n        this.from,\n        this.to,\n        this.common,\n        this.commonFactor,\n      );\n      this.array1Extract = extracts.data1;\n      this.array1ExtractInfo = extracts.info1;\n      this.array2Extract = extracts.data2;\n      this.array2ExtractInfo = extracts.info2;\n    } else {\n      let extract1 = extractAndNormalize(this.array1, this.from, this.to);\n      this.array1Extract = extract1.data;\n      this.array1ExtractInfo = extract1.info;\n      let extract2 = extractAndNormalize(this.array2, this.from, this.to);\n      this.array2Extract = extract2.data;\n      this.array2ExtractInfo = extract2.info;\n    }\n  }\n\n  getOverlap(x1, y1, x2, y2) {\n    if (y1 === 0 || y2 === 0) return 0;\n\n    // TAKE CARE !!! We multiply the diff by 2 !!!\n    const diff = Math.abs(x1 - x2) * 2;\n\n    if (diff > this.widthBottom) return 0;\n    if (diff <= this.widthTop) {\n      return Math.min(y1, y2);\n    }\n\n    const maxValue =\n      (Math.max(y1, y2) * (this.widthBottom - diff)) /\n      (this.widthBottom - this.widthTop);\n    return Math.min(y1, y2, maxValue);\n  }\n\n  // This is the old trapezoid similarity\n  getOverlapTrapezoid(x1, y1, x2, y2, widthTop, widthBottom) {\n    const factor = 2 / (widthTop + widthBottom); // correction for surface=1\n    if (y1 === 0 || y2 === 0) return 0;\n    if (x1 === x2) {\n      // they have the same position\n      return Math.min(y1, y2);\n    }\n\n    const diff = Math.abs(x1 - x2);\n    if (diff >= widthBottom) return 0;\n    if (y1 === y2) {\n      // do they have the same height ???\n      // we need to find the common length\n      if (diff <= widthTop) {\n        return ((widthTop + widthBottom) / 2 - diff) * y1 * factor;\n      } else if (diff <= widthBottom) {\n        return (\n          (((((widthBottom - diff) * y1) / 2) * (diff - widthTop)) /\n            (widthBottom - widthTop)) *\n          factor\n        );\n      }\n      return 0;\n    } else {\n      // the height are different and not the same position ...\n      // we need to consider only one segment to find its intersection\n\n      const small = Math.min(y1, y2);\n      const big = Math.max(y1, y2);\n\n      const targets = [\n        [\n          [0, 0],\n          [widthSlope, small],\n        ],\n        [\n          [widthSlope, small],\n          [widthSlope + widthTop, small],\n        ],\n        [\n          [widthTop + widthSlope, small],\n          [widthBottom, 0],\n        ],\n      ];\n      let segment;\n      if ((x1 > x2 && y1 > y2) || (x1 < x2 && y1 < y2)) {\n        segment = [\n          [diff, 0],\n          [diff + widthSlope, big],\n        ];\n      } else {\n        segment = [\n          [diff + widthSlope, big],\n          [diff, 0],\n        ];\n      }\n\n      for (let i = 0; i < 3; i++) {\n        const intersection = getIntersection(targets[i], segment);\n        if (intersection) {\n          switch (i) {\n            case 0:\n              return small - ((diff * intersection.y) / 2) * factor;\n            case 1: // to simplify ...\n              //     console.log(\"           \",widthSlope,small,big,intersection.x)\n              return (\n                (((widthSlope * small) / (2 * big)) * small +\n                  (widthTop + widthSlope - intersection.x) * small +\n                  (widthSlope * small) / 2) *\n                factor\n              );\n            case 2:\n              return (((widthBottom - diff) * intersection.y) / 2) * factor;\n            default:\n              throw new Error(`unexpected intersection value: ${i}`);\n          }\n        }\n      }\n    }\n    return NaN;\n  }\n\n  // this method calculates the total diff. The sum of positive value will yield to overlap\n  calculateDiff() {\n    // we need to take 2 pointers\n    // and travel progressively between them ...\n    const newFirst = [\n      [].concat(this.array1Extract[0]),\n      [].concat(this.array1Extract[1]),\n    ];\n    const newSecond = [\n      [].concat(this.array2Extract[0]),\n      [].concat(this.array2Extract[1]),\n    ];\n    const array1Length = this.array1Extract[0]\n      ? this.array1Extract[0].length\n      : 0;\n    const array2Length = this.array2Extract[0]\n      ? this.array2Extract[0].length\n      : 0;\n\n    let pos1 = 0;\n    let pos2 = 0;\n    let previous2 = 0;\n    while (pos1 < array1Length) {\n      const diff = newFirst[0][pos1] - this.array2Extract[0][pos2];\n      if (Math.abs(diff) < this.widthBottom) {\n        // there is some overlap\n        let overlap;\n        if (this.trapezoid) {\n          overlap = this.getOverlapTrapezoid(\n            newFirst[0][pos1],\n            newFirst[1][pos1],\n            newSecond[0][pos2],\n            newSecond[1][pos2],\n            this.widthTop,\n            this.widthBottom,\n          );\n        } else {\n          overlap = this.getOverlap(\n            newFirst[0][pos1],\n            newFirst[1][pos1],\n            newSecond[0][pos2],\n            newSecond[1][pos2],\n            this.widthTop,\n            this.widthBottom,\n          );\n        }\n        newFirst[1][pos1] -= overlap;\n        newSecond[1][pos2] -= overlap;\n        if (pos2 < array2Length - 1) {\n          pos2++;\n        } else {\n          pos1++;\n          pos2 = previous2;\n        }\n      } else if (diff > 0 && pos2 < array2Length - 1) {\n        pos2++;\n        previous2 = pos2;\n      } else {\n        pos1++;\n        pos2 = previous2;\n      }\n    }\n    return newSecond;\n  }\n\n  getSimilarity(newPeaks1, newPeaks2) {\n    if (newPeaks1) this.setPeaks1(newPeaks1);\n    if (newPeaks2) this.setPeaks2(newPeaks2);\n    const diff = this.calculateDiff();\n    return {\n      diff,\n      extract1: this.getExtract1(),\n      extract2: this.getExtract2(),\n      extractInfo1: this.getExtractInfo1(),\n      extractInfo2: this.getExtractInfo2(),\n      similarity: calculateOverlapFromDiff(diff),\n      widthBottom: this.widthBottom,\n      widthTop: this.widthTop,\n    };\n  }\n\n  /*\n    This works mainly when you have a array1 that is fixed\n    newPeaks2 have to be normalized ! (sum to 1)\n  */\n  fastSimilarity(newPeaks2, from, to) {\n    this.array1Extract = extract(this.array1, from, to);\n    this.array2Extract = newPeaks2;\n    if (this.common & COMMON_SECOND) {\n      this.array1Extract = getCommonArray(\n        this.array1Extract,\n        this.array2Extract,\n        this.widthBottom,\n      );\n    }\n    normalize(this.array1Extract);\n    const diff = this.calculateDiff();\n    return calculateOverlapFromDiff(diff);\n  }\n}\n"],"names":["calculateOverlapFromDiff","diffs","length","sumPos","i","Math","abs","checkArray","points","Array","isArray","x","y","extract","array","from","to","newArray","j","getCommonArray","array1","array2","width","pos2","array1Length","array2Length","compareNumbers","a","b","exports","sum","values","max","l","min","minMax","arithmeticMean","mean","geometricMean","mul","pow","logMean","lnsum","log","grandMean","means","samples","n","truncatedMean","percent","alreadySorted","undefined","concat","sort","k","floor","harmonicMean","RangeError","contraHarmonicMean","r1","r2","median","half","variance","unbiased","theMean","theVariance","standardDeviation","sqrt","standardError","robustMeanAndStdev","averageDeviations","stdev","quartiles","quart","q1","ceil","q2","q3","pooledStandardDeviation","pooledVariance","vari","mode","itemCount","itemArray","count","index","indexOf","maxValue","maxIndex","covariance","vector1","vector2","mean1","mean2","cov","skewness","s2","s3","dev","m2","g","kurtosis","s4","v","entropy","eps","weightedMean","weights","weightedStandardDeviation","weightedVariance","z","w","center","inPlace","result","standardize","standardDev","cumulativeSum","arrayStat","require$$0","matrix","Infinity","l1","l2","dimension","N","rows","cols","Error","theSum","product","theProduct","sum1","sum2","medians","data","modes","skew","m","kurt","m4","c","standardDeviations","standardErrors","sqrtN","scatter","divisor","s","correlation","scores","zScores","cor","jj","row","resultRow","sourceRow","isNaN","ii","weightSum","weightedCovariance","s1","factor","weightedScatter","mlStat","normalize","StatArray","commonExtractAndNormalize","common","info","extract1","extract2","common1","common2","info1","info2","COMMON_SECOND","COMMON_FIRST","data1","data2","extractAndNormalize","getIntersection","segment1","segment2","p0X","p0Y","p1X","p1Y","p2X","p2Y","s1X","s1Y","s2X","s2Y","t","require$$1","constructor","options","arguments","this","widthTop","widthBottom","array1Extract","array2Extract","widthSlope","array1ExtractInfo","array2ExtractInfo","commonFactor","setOptions","toLowerCase","trapezoid","setTrapezoid","setFromTo","setPeaks1","anArray","extracts","setPeaks2","getExtract1","getExtract2","getExtractInfo1","getExtractInfo2","newWidthBottom","newWidthTop","newFrom","newTo","getOverlap","x1","y1","x2","y2","diff","getOverlapTrapezoid","small","big","targets","segment","intersection","NaN","calculateDiff","newFirst","newSecond","pos1","previous2","overlap","getSimilarity","newPeaks1","newPeaks2","extractInfo1","extractInfo2","similarity","fastSimilarity"],"mappings":"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"}