{"version":3,"file":"peaks-similarity.js","sources":["../src/calculateOverlapFromDiff.js","../src/checkArray.js","../src/extract.js","../src/getCommonArray.js","../node_modules/ml-stat/array.js","../node_modules/ml-stat/matrix.js","../node_modules/ml-stat/index.js","../src/normalize.js","../src/commonExtractAndNormalize.js","../src/extractAndNormalize.js","../src/getIntersection.js","../src/index.js"],"sourcesContent":["export function calculateOverlapFromDiff(diffs) {\n  if (diffs[1].length === 0) return 0;\n  let sumPos = 0;\n  for (let i = 0; i < diffs[1].length; i++) {\n    sumPos += Math.abs(diffs[1][i]);\n  }\n  return 1 - sumPos;\n}\n","/**\n        This code requires the use of an array like  [[x1,y1],[x2,y2], ...]\n        If it is not the right format, we will just convert it\n        Otherwise we return the correct format\n     */\nexport function checkArray(points) {\n  // if it is already a 2D array of points, we just return them\n  if (\n    Array.isArray(points) &&\n    Array.isArray(points[0]) &&\n    points.length === 2\n  ) {\n    return points;\n  }\n  const x = new Array(points.length);\n  const y = new Array(points.length);\n  for (let i = 0; i < points.length; i++) {\n    x[i] = points[i][0];\n    y[i] = points[i][1];\n  }\n  return [x, y];\n}\n","export function extract(array, from, to) {\n  const newArray = [[], []];\n  let j = 0;\n  const length = array[0] ? array[0].length : 0;\n  for (let i = 0; i < length; i++) {\n    if ((!from || array[0][i] >= from) && (!to || array[0][i] <= to)) {\n      newArray[0][j] = array[0][i];\n      newArray[1][j] = array[1][i];\n      j++;\n    }\n  }\n  return newArray;\n}\n","// returns an new array based on array1 where there is a peak of array2 at a distance under width/2\n\nexport function getCommonArray(array1, array2, width) {\n  const newArray = [[], []];\n  let pos2 = 0;\n  width /= 2;\n  let j = 0;\n  const array1Length = array1[0] ? array1[0].length : 0;\n  const array2Length = array2[0] ? array2[0].length : 0;\n\n  for (let i = 0; i < array1Length; i++) {\n    while (pos2 < array2Length && array1[0][i] > array2[0][pos2] + width) {\n      pos2++;\n    }\n    if (pos2 < array2Length && array1[0][i] > array2[0][pos2] - width) {\n      newArray[0][j] = array1[0][i];\n      newArray[1][j] = array1[1][i];\n      j++;\n    }\n  }\n  return newArray;\n}\n","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = values[0];\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\n/**\n * IEEE Transactions on biomedical engineering, vol. 52, no. 1, january 2005, p. 76-\n * Calculate the standard deviation via the Median of the absolute deviation\n *  The formula for the standard deviation only holds for Gaussian random variables.\n * @returns {{mean: number, stdev: number}}\n */\nexports.robustMeanAndStdev = function robustMeanAndStdev(y) {\n    var mean = 0, stdev = 0;\n    var length = y.length, i = 0;\n    for (i = 0; i < length; i++) {\n        mean += y[i];\n    }\n    mean /= length;\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort(compareNumbers);\n    if (length % 2 === 1) {\n        stdev = averageDeviations[(length - 1) / 2] / 0.6745;\n    } else {\n        stdev = 0.5 * (averageDeviations[length / 2] + averageDeviations[length / 2 - 1]) / 0.6745;\n    }\n\n    return {\n        mean: mean,\n        stdev: stdev\n    };\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof (alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw 'Vectors do not have the same dimensions';\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    } else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    } else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof (eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = [].concat(values);\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof (standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n","'use strict';\n\nvar arrayStat = require('./array');\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\nexports.max = function max(matrix) {\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return max;\n};\n\nexports.min = function min(matrix) {\n    var min = Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n        }\n    }\n    return min;\n};\n\nexports.minMax = function minMax(matrix) {\n    var min = Infinity;\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return {\n        min:min,\n        max:max\n    };\n};\n\nexports.entropy = function entropy(matrix, eps) {\n    if (typeof (eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n};\n\nexports.mean = function mean(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n};\n\nexports.sum = function sum(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theSum, i, j;\n\n    if (dimension === -1) {\n        theSum = [0];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theSum[0] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theSum = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theSum[j] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theSum = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theSum[j] += matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theSum;\n};\n\nexports.product = function product(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theProduct, i, j;\n\n    if (dimension === -1) {\n        theProduct = [1];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theProduct[0] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theProduct = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < rows; i++) {\n                theProduct[j] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theProduct = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < cols; i++) {\n                theProduct[j] *= matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theProduct;\n};\n\nexports.standardDeviation = function standardDeviation(matrix, means, unbiased) {\n    var vari = exports.variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n};\n\nexports.variance = function variance(matrix, means, unbiased) {\n    if (typeof (unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n};\n\nexports.median = function median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort(compareNumbers);\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n};\n\nexports.mode = function mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n};\n\nexports.skewness = function skewness(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n};\n\nexports.kurtosis = function kurtosis(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n};\n\nexports.standardError = function standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = exports.standardDeviation(matrix);\n    var l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n};\n\nexports.covariance = function covariance(matrix, dimension) {\n    return exports.scatter(matrix, undefined, dimension);\n};\n\nexports.scatter = function scatter(matrix, divisor, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof (divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = exports.mean(matrix, dimension);\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n\nexports.correlation = function correlation(matrix) {\n    var means = exports.mean(matrix),\n        standardDeviations = exports.standardDeviation(matrix, true, means),\n        scores = exports.zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n};\n\nexports.zScores = function zScores(matrix, means, standardDeviations) {\n    means = means || exports.mean(matrix);\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix, true, means);\n    return exports.standardize(exports.center(matrix, means, false), standardDeviations, true);\n};\n\nexports.center = function center(matrix, means, inPlace) {\n    means = means || exports.mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n};\n\nexports.standardize = function standardize(matrix, standardDeviations, inPlace) {\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n};\n\nexports.weightedVariance = function weightedVariance(matrix, weights) {\n    var means = exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n};\n\nexports.weightedMean = function weightedMean(matrix, weights, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n};\n\nexports.weightedCovariance = function weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return exports.weightedScatter(matrix, weights, means, factor, dimension);\n};\n\nexports.weightedScatter = function weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    if (typeof (factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n","import { array as StatArray } from 'ml-stat';\n\nexport function normalize(array) {\n  const min = StatArray.min(array[1]);\n  const max = StatArray.max(array[1]);\n  const sum = StatArray.sum(array[1]);\n  const length = array[1] ? array[1].length : 0;\n  if (sum !== 0) {\n    for (let i = 0; i < length; i++) {\n      array[1][i] /= sum;\n    }\n  }\n  return {\n    sum,\n    min,\n    max,\n  };\n}\n","import { extract } from './extract';\nimport { COMMON_SECOND, COMMON_FIRST } from './index';\nimport { getCommonArray } from './getCommonArray';\nimport { normalize } from './normalize';\n\n// this method will systematically take care of both array\nexport function commonExtractAndNormalize(\n  array1,\n  array2,\n  width,\n  from,\n  to,\n  common,\n) {\n  if (!Array.isArray(array1) || !Array.isArray(array2)) {\n    return {\n      info: undefined,\n      data: undefined,\n    };\n  }\n  const extract1 = extract(array1, from, to);\n  const extract2 = extract(array2, from, to);\n  let common1, common2, info1, info2;\n  if (common & COMMON_SECOND) {\n    common1 = getCommonArray(extract1, extract2, width);\n    info1 = normalize(common1);\n  } else {\n    common1 = extract1;\n    info1 = normalize(common1);\n  }\n  if (common & COMMON_FIRST) {\n    common2 = getCommonArray(extract2, extract1, width);\n    info2 = normalize(common2);\n  } else {\n    common2 = extract2;\n    info2 = normalize(common2);\n  }\n\n  return {\n    info1,\n    info2,\n    data1: common1,\n    data2: common2,\n  };\n}\n","import { extract } from './extract';\nimport { normalize } from './normalize';\n\nexport function extractAndNormalize(array, from, to) {\n  if (!Array.isArray(array)) {\n    return {\n      info: undefined,\n      data: undefined,\n    };\n  }\n  const newArray = extract(array, from, to);\n  const info = normalize(newArray);\n  return {\n    info,\n    data: newArray,\n  };\n}\n","// Adapted from: http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect/1968345#1968345\nexport function getIntersection(segment1, segment2) {\n  const p0X = segment1[0][0];\n  const p0Y = segment1[0][1];\n  const p1X = segment1[1][0];\n  const p1Y = segment1[1][1];\n  const p2X = segment2[0][0];\n  const p2Y = segment2[0][1];\n  const p3X = segment2[1][0];\n  const p3Y = segment2[1][1];\n\n  const s1X = p1X - p0X;\n  const s1Y = p1Y - p0Y;\n  const s2X = p3X - p2X;\n  const s2Y = p3Y - p2Y;\n  const s = (-s1Y * (p0X - p2X) + s1X * (p0Y - p2Y)) / (-s2X * s1Y + s1X * s2Y);\n  const t = (s2X * (p0Y - p2Y) - s2Y * (p0X - p2X)) / (-s2X * s1Y + s1X * s2Y);\n  if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n    return {\n      x: p0X + t * s1X,\n      y: p0Y + t * s1Y,\n    };\n  }\n  return null; // No collision\n}\n","// should be a binary operation !\n\nimport { calculateOverlapFromDiff } from './calculateOverlapFromDiff';\nimport { checkArray } from './checkArray';\nimport { commonExtractAndNormalize } from './commonExtractAndNormalize';\nimport { extract } from './extract';\nimport { extractAndNormalize } from './extractAndNormalize';\nimport { getCommonArray } from './getCommonArray.js';\nimport { getIntersection } from './getIntersection';\nimport { normalize } from './normalize';\n\nconst COMMON_NO = 0;\nexport const COMMON_FIRST = 1;\nexport const COMMON_SECOND = 2;\nconst COMMON_BOTH = 3;\n\n/**\n * Create a comparator class\n * {object} [options={}]\n * {string} [options.common=''] should we take only common peaks 'first', 'second', 'both', ''\n * {number} [options.widthBottom=2] bottom trapezoid width for similarity evaluation\n * {number} [options.widthTop=1] top trapezoid width for similarity evaluation\n * {number} [options.from] from region used for similarity calculation\n * {number} [options.to] to region used for similarity calculation\n */\n\nexport default class Comparator {\n  constructor(options = {}) {\n    this.widthTop;\n    this.widthBottom;\n    this.from;\n    this.to;\n    this.array1Extract;\n    this.array2Extract;\n    this.widthSlope;\n    this.array1ExtractInfo;\n    this.array2ExtractInfo;\n    this.common;\n    this.commonFactor;\n\n    this.array1 = [];\n    this.array2 = [];\n\n    this.setOptions(options);\n  }\n\n  /*\n     2 formats are allowed:\n     [[x1,x2,...],[y1,y2,...]] or [[x1,y1],[x2,y2], ...]\n    */\n\n  setOptions(options = {}) {\n    if (typeof options.common === 'string') {\n      if (options.common.toLowerCase() === 'first') {\n        this.common = COMMON_FIRST;\n      } else if (options.common.toLowerCase() === 'second') {\n        this.common = COMMON_SECOND;\n      } else if (options.common.toLowerCase() === 'both') {\n        this.common = COMMON_BOTH;\n      } else {\n        this.common = COMMON_NO;\n      }\n    } else if (options.common === true) {\n      this.common = COMMON_BOTH;\n    } else {\n      this.common = COMMON_NO;\n    }\n    this.trapezoid = options.trapezoid;\n    this.commonFactor = options.commonFactor || this.commonFactor || 4;\n\n    const {\n      widthBottom = this.widthBottom || 2,\n      widthTop = this.widthTop || 1,\n      from = this.from,\n      to = this.to,\n    } = options;\n    this.setTrapezoid(widthBottom, widthTop);\n    this.setFromTo(from, to);\n  }\n\n  setPeaks1(anArray) {\n    this.array1 = checkArray(anArray);\n\n    if (this.common) {\n      const extracts = commonExtractAndNormalize(\n        this.array1,\n        this.array2,\n        this.widthBottom,\n        this.from,\n        this.to,\n        this.common,\n      );\n      this.array1Extract = extracts.data1;\n      this.array1ExtractInfo = extracts.info1;\n      this.array2Extract = extracts.data2;\n      this.array2ExtractInfo = extracts.info2;\n    } else {\n      const extract = extractAndNormalize(this.array1, this.from, this.to);\n      this.array1Extract = extract.data;\n      this.array1ExtractInfo = extract.info;\n    }\n  }\n\n  setPeaks2(anArray) {\n    this.array2 = checkArray(anArray);\n    if (this.common) {\n      const extracts = commonExtractAndNormalize(\n        this.array1,\n        this.array2,\n        this.widthBottom,\n        this.from,\n        this.to,\n        this.common,\n      );\n      this.array1Extract = extracts.data1;\n      this.array1ExtractInfo = extracts.info1;\n      this.array2Extract = extracts.data2;\n      this.array2ExtractInfo = extracts.info2;\n    } else {\n      const extract = extractAndNormalize(this.array2, this.from, this.to);\n      this.array2Extract = extract.data;\n      this.array2ExtractInfo = extract.info;\n    }\n  }\n\n  getExtract1() {\n    return this.array1Extract;\n  }\n\n  getExtract2() {\n    return this.array2Extract;\n  }\n\n  getExtractInfo1() {\n    return this.array1ExtractInfo;\n  }\n\n  getExtractInfo2() {\n    return this.array2ExtractInfo;\n  }\n\n  setTrapezoid(newWidthBottom, newWidthTop) {\n    this.widthTop = newWidthTop;\n    this.widthBottom = newWidthBottom;\n    this.widthSlope = (this.widthBottom - this.widthTop) / 2;\n    if (this.widthBottom < this.widthTop) {\n      throw new Error('widthBottom has to be larger than widthTop');\n    }\n  }\n\n  setFromTo(newFrom, newTo) {\n    if (newFrom === this.from && newTo === this.to) return;\n    this.from = newFrom;\n    this.to = newTo;\n    if (this.common) {\n      const extracts = commonExtractAndNormalize(\n        this.array1,\n        this.array2,\n        this.widthBottom,\n        this.from,\n        this.to,\n        this.common,\n        this.commonFactor,\n      );\n      this.array1Extract = extracts.data1;\n      this.array1ExtractInfo = extracts.info1;\n      this.array2Extract = extracts.data2;\n      this.array2ExtractInfo = extracts.info2;\n    } else {\n      let extract1 = extractAndNormalize(this.array1, this.from, this.to);\n      this.array1Extract = extract1.data;\n      this.array1ExtractInfo = extract1.info;\n      let extract2 = extractAndNormalize(this.array2, this.from, this.to);\n      this.array2Extract = extract2.data;\n      this.array2ExtractInfo = extract2.info;\n    }\n  }\n\n  getOverlap(x1, y1, x2, y2) {\n    if (y1 === 0 || y2 === 0) return 0;\n\n    // TAKE CARE !!! We multiply the diff by 2 !!!\n    const diff = Math.abs(x1 - x2) * 2;\n\n    if (diff > this.widthBottom) return 0;\n    if (diff <= this.widthTop) {\n      return Math.min(y1, y2);\n    }\n\n    const maxValue =\n      (Math.max(y1, y2) * (this.widthBottom - diff)) /\n      (this.widthBottom - this.widthTop);\n    return Math.min(y1, y2, maxValue);\n  }\n\n  // This is the old trapezoid similarity\n  getOverlapTrapezoid(x1, y1, x2, y2, widthTop, widthBottom) {\n    const factor = 2 / (widthTop + widthBottom); // correction for surface=1\n    if (y1 === 0 || y2 === 0) return 0;\n    if (x1 === x2) {\n      // they have the same position\n      return Math.min(y1, y2);\n    }\n\n    const diff = Math.abs(x1 - x2);\n    if (diff >= widthBottom) return 0;\n    if (y1 === y2) {\n      // do they have the same height ???\n      // we need to find the common length\n      if (diff <= widthTop) {\n        return ((widthTop + widthBottom) / 2 - diff) * y1 * factor;\n      } else if (diff <= widthBottom) {\n        return (\n          (((((widthBottom - diff) * y1) / 2) * (diff - widthTop)) /\n            (widthBottom - widthTop)) *\n          factor\n        );\n      }\n      return 0;\n    } else {\n      // the height are different and not the same position ...\n      // we need to consider only one segment to find its intersection\n\n      const small = Math.min(y1, y2);\n      const big = Math.max(y1, y2);\n\n      const targets = [\n        [\n          [0, 0],\n          [widthSlope, small],\n        ],\n        [\n          [widthSlope, small],\n          [widthSlope + widthTop, small],\n        ],\n        [\n          [widthTop + widthSlope, small],\n          [widthBottom, 0],\n        ],\n      ];\n      let segment;\n      if ((x1 > x2 && y1 > y2) || (x1 < x2 && y1 < y2)) {\n        segment = [\n          [diff, 0],\n          [diff + widthSlope, big],\n        ];\n      } else {\n        segment = [\n          [diff + widthSlope, big],\n          [diff, 0],\n        ];\n      }\n\n      for (let i = 0; i < 3; i++) {\n        const intersection = getIntersection(targets[i], segment);\n        if (intersection) {\n          switch (i) {\n            case 0:\n              return small - ((diff * intersection.y) / 2) * factor;\n            case 1: // to simplify ...\n              //     console.log(\"           \",widthSlope,small,big,intersection.x)\n              return (\n                (((widthSlope * small) / (2 * big)) * small +\n                  (widthTop + widthSlope - intersection.x) * small +\n                  (widthSlope * small) / 2) *\n                factor\n              );\n            case 2:\n              return (((widthBottom - diff) * intersection.y) / 2) * factor;\n            default:\n              throw new Error(`unexpected intersection value: ${i}`);\n          }\n        }\n      }\n    }\n    return NaN;\n  }\n\n  // this method calculates the total diff. The sum of positive value will yield to overlap\n  calculateDiff() {\n    // we need to take 2 pointers\n    // and travel progressively between them ...\n    const newFirst = [\n      [].concat(this.array1Extract[0]),\n      [].concat(this.array1Extract[1]),\n    ];\n    const newSecond = [\n      [].concat(this.array2Extract[0]),\n      [].concat(this.array2Extract[1]),\n    ];\n    const array1Length = this.array1Extract[0]\n      ? this.array1Extract[0].length\n      : 0;\n    const array2Length = this.array2Extract[0]\n      ? this.array2Extract[0].length\n      : 0;\n\n    let pos1 = 0;\n    let pos2 = 0;\n    let previous2 = 0;\n    while (pos1 < array1Length) {\n      const diff = newFirst[0][pos1] - this.array2Extract[0][pos2];\n      if (Math.abs(diff) < this.widthBottom) {\n        // there is some overlap\n        let overlap;\n        if (this.trapezoid) {\n          overlap = this.getOverlapTrapezoid(\n            newFirst[0][pos1],\n            newFirst[1][pos1],\n            newSecond[0][pos2],\n            newSecond[1][pos2],\n            this.widthTop,\n            this.widthBottom,\n          );\n        } else {\n          overlap = this.getOverlap(\n            newFirst[0][pos1],\n            newFirst[1][pos1],\n            newSecond[0][pos2],\n            newSecond[1][pos2],\n            this.widthTop,\n            this.widthBottom,\n          );\n        }\n        newFirst[1][pos1] -= overlap;\n        newSecond[1][pos2] -= overlap;\n        if (pos2 < array2Length - 1) {\n          pos2++;\n        } else {\n          pos1++;\n          pos2 = previous2;\n        }\n      } else if (diff > 0 && pos2 < array2Length - 1) {\n        pos2++;\n        previous2 = pos2;\n      } else {\n        pos1++;\n        pos2 = previous2;\n      }\n    }\n    return newSecond;\n  }\n\n  getSimilarity(newPeaks1, newPeaks2) {\n    if (newPeaks1) this.setPeaks1(newPeaks1);\n    if (newPeaks2) this.setPeaks2(newPeaks2);\n    const diff = this.calculateDiff();\n    return {\n      diff,\n      extract1: this.getExtract1(),\n      extract2: this.getExtract2(),\n      extractInfo1: this.getExtractInfo1(),\n      extractInfo2: this.getExtractInfo2(),\n      similarity: calculateOverlapFromDiff(diff),\n      widthBottom: this.widthBottom,\n      widthTop: this.widthTop,\n    };\n  }\n\n  /*\n    This works mainly when you have a array1 that is fixed\n    newPeaks2 have to be normalized ! (sum to 1)\n  */\n  fastSimilarity(newPeaks2, from, to) {\n    this.array1Extract = extract(this.array1, from, to);\n    this.array2Extract = newPeaks2;\n    if (this.common & COMMON_SECOND) {\n      this.array1Extract = getCommonArray(\n        this.array1Extract,\n        this.array2Extract,\n        this.widthBottom,\n      );\n    }\n    normalize(this.array1Extract);\n    const diff = this.calculateDiff();\n    return calculateOverlapFromDiff(diff);\n  }\n}\n"],"names":["calculateOverlapFromDiff","diffs","length","sumPos","i","Math","abs","checkArray","points","Array","isArray","x","y","extract","array","from","to","newArray","j","getCommonArray","array1","array2","width","pos2","array1Length","array2Length","compareNumbers","a","b","exports","sum","values","max","l","min","minMax","arithmeticMean","mean","geometricMean","mul","pow","logMean","lnsum","log","grandMean","means","samples","n","truncatedMean","percent","alreadySorted","undefined","concat","sort","k","floor","harmonicMean","RangeError","contraHarmonicMean","r1","r2","median","half","variance","unbiased","theMean","theVariance","standardDeviation","sqrt","standardError","robustMeanAndStdev","stdev","averageDeviations","quartiles","quart","q1","ceil","q2","q3","pooledStandardDeviation","pooledVariance","vari","mode","itemCount","itemArray","count","index","indexOf","maxValue","maxIndex","covariance","vector1","vector2","mean1","mean2","cov","skewness","s2","s3","dev","m2","m3","g","kurtosis","s4","m4","v","c","entropy","eps","weightedMean","weights","weightedStandardDeviation","weightedVariance","z","w","center","inPlace","result","standardize","standardDev","cumulativeSum","arrayStat","require$$0","matrix","Infinity","l1","l2","dimension","rows","cols","N","Error","theSum","product","theProduct","sum1","sum2","medians","data","modes","skew","m","kurt","standardDeviations","standardErrors","sqrtN","scatter","divisor","s","correlation","scores","zScores","cor","jj","row","resultRow","sourceRow","isNaN","ii","weightSum","weightedCovariance","s1","factor","weightedScatter","mlStat","require$$1","normalize","StatArray","commonExtractAndNormalize","common","info","extract1","extract2","common1","common2","info1","info2","COMMON_SECOND","COMMON_FIRST","data1","data2","extractAndNormalize","getIntersection","segment1","segment2","p0X","p0Y","p1X","p1Y","p2X","p2Y","p3X","p3Y","s1X","s1Y","s2X","s2Y","t","COMMON_NO","COMMON_BOTH","Comparator","constructor","options","widthTop","widthBottom","array1Extract","array2Extract","widthSlope","array1ExtractInfo","array2ExtractInfo","commonFactor","setOptions","toLowerCase","trapezoid","setTrapezoid","setFromTo","setPeaks1","anArray","extracts","setPeaks2","getExtract1","getExtract2","getExtractInfo1","getExtractInfo2","newWidthBottom","newWidthTop","newFrom","newTo","getOverlap","x1","y1","x2","y2","diff","getOverlapTrapezoid","small","big","targets","segment","intersection","NaN","calculateDiff","newFirst","newSecond","pos1","previous2","overlap","getSimilarity","newPeaks1","newPeaks2","extractInfo1","extractInfo2","similarity","fastSimilarity"],"mappings":"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"}